#!/bin/bash

# Check for bc
if ! command -v bc >/dev/null 2>&1; then
    echo "⚠️  'bc' is required for this script but is not installed."
    echo "Attempting to install it..."
    if [ -f /etc/debian_version ]; then
        sudo apt update && sudo apt install -y bc
    elif [ -f /etc/alpine-release ]; then
        sudo apk add bc
    elif [ -f /etc/redhat-release ] || grep -qi "fedora" /etc/os-release; then
        sudo dnf install -y bc || sudo yum install -y bc
    else
        echo "❌ Unsupported system. Please install 'bc' manually."
        exit 1
    fi
fi

clear
echo "🔐 Isolation Decision Helper – IsoWise"
echo ""
echo "This tool helps you decide whether a service should run in a VM or LXC."
echo "Answer with y (yes), n (no), or u (unsure)."
echo ""

# Prompt for service name
read -p "🛠️  What is the name of the service? " servicename
logfile="logs/${servicename// /_}.log"
mkdir -p logs

log_entry() {
    echo "$1" >> "$logfile"
}

# Select mode
echo "Choose mode:"
echo "1. Simple (5 basic questions)"
echo "2. Advanced (detailed risk assessment)"
read -p "Enter choice [1/2]: " mode

score=0
answers=()
questions=()

ask() {
    local question="$1"
    local answer=""
    while true; do
        read -p "$question [y/n/u]: " answer
        case $answer in
            y|Y ) score=$(echo "$score + 1" | bc); answers+=("y"); break;;
            u|U ) score=$(echo "$score + 0.5" | bc); answers+=("u"); break;;
            n|N ) answers+=("n"); break;;
            * ) echo "Please enter y (yes), n (no), or u (unsure).";;
        esac
    done
    questions+=("$question")
}

timestamp=$(date "+%Y-%m-%d %H:%M:%S")
log_entry "────────────────────────────────────────"
log_entry "🛠️  Service: $servicename"
log_entry "📅 Timestamp: $timestamp"

# QUESTIONS
if [[ "$mode" == "1" ]]; then
    log_entry "📊 Mode: Simple"
    ask "1. Is the service exposed to the internet?"
    ask "2. Does it handle sensitive user data?"
    ask "3. Is it running third-party or untrusted code?"
    ask "4. Does it require root access or host-level control?"
    ask "5. Is performance more important than isolation?"
else
    log_entry "📊 Mode: Advanced"
    ask "1. Is the service exposed to the public internet?"
    ask "2. Does it store or process personal or sensitive information?"
    ask "3. Will it interact with external APIs or plugins?"
    ask "4. Does it require privileged access (e.g. mount disks, run as root)?"
    ask "5. Will it run potentially unreviewed or unmaintained open source code?"
    ask "6. Would a compromise lead to access to other containers or the host?"
    ask "7. Does the service have a high CVE exposure history (e.g. WordPress)?"
    ask "8. Is system performance critical (e.g. high IOPS or low latency)?"
    ask "9. Will multiple users interact with the system simultaneously?"
    ask "10. Is it something you plan to upgrade/test often with unknown configs?"
fi

# Log answers
log_entry "🧠 Risk score: $score"
log_entry "📋 Questions and Answers:"
for i in "${!questions[@]}"; do
    log_entry "Q: ${questions[$i]}"
    log_entry "A: ${answers[$i]}"
done

# Decision logic
future_warnings=()
exposed_answer="${answers[0]:-n}"

[[ "${answers[1]}" == "y" || "${answers[1]}" == "u" ]] && future_warnings+=("- Handles sensitive information.")
[[ "${answers[2]}" == "y" || "${answers[2]}" == "u" ]] && future_warnings+=("- Uses external APIs or plugins.")
[[ "${answers[3]}" == "y" ]] && future_warnings+=("- Requires privileged access.")
[[ "${answers[4]}" == "y" ]] && future_warnings+=("- Performance is critical.")

if [[ "$mode" == "2" ]]; then
    [[ "${answers[5]}" == "y" ]] && future_warnings+=("- Could affect container or host if compromised.")
    [[ "${answers[6]}" == "y" ]] && future_warnings+=("- Has known security exposure history.")
    [[ "${answers[7]}" == "y" ]] && future_warnings+=("- Needs ultra-high performance.")
    [[ "${answers[8]}" == "y" ]] && future_warnings+=("- Multi-user interaction increases risk.")
    [[ "${answers[9]}" == "y" ]] && future_warnings+=("- Frequent reconfiguration or updates.")
fi

echo ""
echo "🧠 Total risk score: $score"
echo ""

score_check() {
    echo "$score >= $1" | bc -l
}

# Main recommendation logic
if [[ "$exposed_answer" == "n" ]]; then
    recommendation="📦 Recommendation: You can safely run this service in an **LXC container** because it's not exposed to the internet."

    if (( $(score_check 2) )); then
        recommendation+="\n⚠️  However, consider the following:"
        for warn in "${future_warnings[@]}"; do
            recommendation+=$'\n'"$warn"
        done
        recommendation+=$'\n'"🔐 If you expose this service publicly in the future, strongly consider switching to a VM."
    fi
else
    if (( $(score_check 3) )); then
        recommendation="🧱 Recommendation: Run this service in a **Virtual Machine (VM)** for strong isolation."
    elif (( $(score_check 2) )); then
        recommendation="⚖️  Recommendation: Consider using a VM if you want added protection."
    else
        recommendation="📦 Recommendation: Safe to run as **LXC container**, assuming best practices."
    fi
fi

echo -e "$recommendation"
log_entry "$recommendation"
log_entry ""

